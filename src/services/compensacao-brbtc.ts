/**
 * üè¶ Servi√ßo de Compensa√ß√£o Manual BRBTC
 * 
 * Este servi√ßo integra com a API externa BRBTC para compensa√ß√£o de dep√≥sitos
 * conforme especifica√ß√£o do usu√°rio.
 * 
 * Endpoint: https://vps80270.cloudpublic.com.br:8081/BRBTC/compensacao-manual
 */

import React from "react";
import { toast } from "sonner";
import { MovimentoExtrato } from "@/services/extrato";
import { TOKEN_STORAGE } from "@/config/api";

// ============================== INTERFACES ==============================

export interface CompensacaoBRBTCRequest {
  valor_deposito: number;
  id_usuario: number;
  id_transacao: string; // EndToEnd da transa√ß√£o PIX
  data_hora_deposito: string; // ISO 8601 format
  nome_depositante: string;
  provider: string;
  observacoes: string | null;
}

export interface CompensacaoBRBTCResponse {
  success: boolean;
  message?: string;
  data?: {
    transaction_id?: string;
    status?: string;
    processed_at?: string;
  };
  error?: string;
}

// ============================== CONFIGURA√á√ÉO ==============================

const BRBTC_API_CONFIG = {
  baseUrl: 'https://vps80270.cloudpublic.com.br:8081',
  endpoint: '/BRBTC/compensacao-manual'
};

// ============================== UTILIT√ÅRIOS ==============================

/**
 * üéØ Extrair ID do usu√°rio da descri√ß√£o do cliente
 * 
 * Padr√µes suportados:
 * - caas436344xU1122; (BMP-531)
 * - Usuario 1948; (outros formatos)
 * - Deposito TCR - Usuario 1122;
 */
export const extrairIdUsuario = (extractRecord: MovimentoExtrato): number => {
  if (!extractRecord) return 0;
  
  // ‚úÖ Fun√ß√£o atualizada para reconhecer TODOS os formatos (igual ao modal)
  const textoParaPesquisar = extractRecord.descCliente || '';
  
  if (textoParaPesquisar) {
    // 1. ‚úÖ NOVO: Padr√£o "Usuario 1122;" (busca autom√°tica por endtoend TCR)
    const matchUsuario = textoParaPesquisar.match(/Usuario\s+(\d+)/i);
    if (matchUsuario) {
      return parseInt(matchUsuario[1], 10);
    }
    
    // 2. ‚úÖ ANTIGO: Padr√£o "caas436344xU1122;" (formato original BMP-531)
    const matchXU = textoParaPesquisar.match(/xU(\d+)/i);
    if (matchXU) {
      return parseInt(matchXU[1], 10);
    }
  }
  
  // 3. Fallback: Tentar extrair da descri√ß√£o da opera√ß√£o
  if (extractRecord.descricaoOperacao) {
    const matchOp = extractRecord.descricaoOperacao.match(/Usuario\s+(\d+)|xU(\d+)|U(\d+)/i);
    if (matchOp) {
      // Pegar o primeiro grupo que n√£o √© undefined
      const id = matchOp[1] || matchOp[2] || matchOp[3];
      if (id) return parseInt(id, 10);
    }
  }
  
  // 4. √öltimo fallback: busca geral
  const allText = [
    extractRecord.client,
    extractRecord.descCliente,
    extractRecord.descricaoOperacao
  ].filter(Boolean).join(' ');
  
  if (allText) {
    const match = allText.match(/(?:usuario|user)\s*(\d+)/i);
    if (match) return parseInt(match[1], 10);
  }
  
  return 0;
};

/**
 * üè∑Ô∏è Determinar o provider baseado nos dados do extrato
 */
export const determinarProvider = (extractRecord: MovimentoExtrato): string => {
  if (!extractRecord) return 'unknown';
  
  // Verificar se √© Bitso
  if (extractRecord.bitsoData) {
    return 'bitso';
  }
  
  // Verificar se √© BMP-531 (baseado na estrutura)
  if (extractRecord.descCliente?.includes('caas436344x')) {
    return 'bmp 531 tcr';
  }
  
  // Para BMP gen√©rico ou outros
  return 'bmp tcr';
};

/**
 * üîç Extrair EndToEnd do registro do extrato
 * 
 * Tenta obter o endtoend de v√°rias fontes poss√≠veis:
 * - Dados originais da API (idEndToEnd, endToEndId, identificadorOperacao, etc)
 * - Dados Bitso espec√≠ficos (metadados.end_to_end_id)
 * - Campo code (que geralmente cont√©m o endToEndId)
 * 
 * ‚ö†Ô∏è IMPORTANTE: Para BMP-531, o endtoend geralmente est√° em identificadorOperacao
 */
const extrairEndToEnd = (extractRecord: MovimentoExtrato): string => {
  // 1. Tentar extrair dos dados originais da API (m√∫ltiplos campos poss√≠veis)
  const endtoendOriginal = extractRecord._original?.idEndToEnd || 
                          extractRecord._original?.endToEndId ||
                          extractRecord._original?.e2eId ||
                          extractRecord._original?.endtoend ||
                          extractRecord._original?.end_to_end_id ||
                          extractRecord._original?.identificadorOperacao || // ‚úÖ BMP-531: campo principal
                          extractRecord._original?.EndToEndId ||
                          extractRecord._original?.codigoTransacao; // Fallback BMP-531
  
  if (endtoendOriginal) {
    return endtoendOriginal;
  }
  
  // 2. Para Bitso: tentar dos metadados
  if (extractRecord.bitsoData?.metadados?.end_to_end_id) {
    return extractRecord.bitsoData.metadados.end_to_end_id;
  }
  
  // 3. Fallback: usar o code (que geralmente √© mapeado do endToEndId)
  if (extractRecord.code) {
    return extractRecord.code;
  }
  
  // 4. √öltimo fallback: usar o id
  return extractRecord.id;
};

/**
 * üîÑ Converter dados do extrato para request BRBTC
 */
export const converterParaBRBTCRequest = (
  extractRecord: MovimentoExtrato,
  observacoes?: string
): CompensacaoBRBTCRequest => {
  const idUsuario = extrairIdUsuario(extractRecord);
  const provider = determinarProvider(extractRecord);
  const endtoend = extrairEndToEnd(extractRecord);
  
  // Converter data para ISO 8601
  const dataHoraDeposito = new Date(extractRecord.dateTime).toISOString();
  
  return {
    valor_deposito: Math.abs(extractRecord.value), // Sempre valor positivo
    id_usuario: idUsuario,
    id_transacao: endtoend, // ‚úÖ CORRIGIDO: Agora envia o EndToEnd correto
    data_hora_deposito: dataHoraDeposito,
    nome_depositante: extractRecord.client || 'N√£o informado',
    provider: provider,
    observacoes: observacoes || null
  };
};

// ============================== SERVI√áO PRINCIPAL ==============================

/**
 * üöÄ Realizar compensa√ß√£o manual via API BRBTC
 * 
 * @param extractRecord - Registro do extrato selecionado
 * @param observacoes - Observa√ß√µes opcionais
 * @returns Promise com resultado da opera√ß√£o
 */
export const realizarCompensacaoBRBTC = async (
  extractRecord: MovimentoExtrato,
  observacoes?: string
): Promise<boolean> => {
  try {
    // Valida√ß√µes b√°sicas
    if (!extractRecord) {
      throw new Error('Registro do extrato √© obrigat√≥rio');
    }
    
    const idUsuario = extrairIdUsuario(extractRecord);
    if (!idUsuario) {
      throw new Error('N√£o foi poss√≠vel extrair o ID do usu√°rio do registro');
    }

    // Obter token JWT do usu√°rio logado
    const token = TOKEN_STORAGE.get();
    if (!token) {
      throw new Error('Usu√°rio n√£o autenticado. Fa√ßa login novamente.');
    }
    
    // Preparar dados da requisi√ß√£o
    const requestData = converterParaBRBTCRequest(extractRecord, observacoes);
    
    // Fazer requisi√ß√£o para API BRBTC
    const response = await fetch(`${BRBTC_API_CONFIG.baseUrl}${BRBTC_API_CONFIG.endpoint}`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestData)
    });
    
    let responseData: any;
    let responseText: string = '';
    
    try {
      responseText = await response.text();
      
      responseData = responseText ? JSON.parse(responseText) : {};
    } catch (parseError) {
      responseData = { error: `Resposta inv√°lida da API: ${responseText}` };
    }
    
    if (!response.ok) {
      // Tentar extrair a mensagem de erro mais espec√≠fica poss√≠vel
      let errorMessage = 'Erro desconhecido na API';
      
      if (responseData) {
        // Verificar diferentes formatos de erro que a API pode retornar
        errorMessage = responseData.error || 
                     responseData.message || 
                     responseData.msg || 
                     responseData.detail || 
                     responseData.details ||
                     (responseData.data && responseData.data.error) ||
                     (responseData.data && responseData.data.message);
        
        // Se ainda n√£o encontrou uma mensagem espec√≠fica, tentar extrair de arrays de erros
        if (!errorMessage && responseData.errors && Array.isArray(responseData.errors)) {
          errorMessage = responseData.errors.map((err: any) => 
            typeof err === 'string' ? err : err.message || err.msg || JSON.stringify(err)
          ).join('; ');
        }
        
        // Se ainda n√£o encontrou, usar o status HTTP
        if (!errorMessage) {
          errorMessage = `Erro HTTP ${response.status}: ${response.statusText}`;
        }
      }
      
      
      throw new Error(errorMessage);
    }
    
    
    // Toast de sucesso
    toast.success('Compensa√ß√£o BRBTC realizada com sucesso!', {
      description: `Valor: R$ ${requestData.valor_deposito.toFixed(2)} | Usu√°rio: ${requestData.id_usuario}`
    });
    
    return true;
    
  } catch (error) {
    let errorMessage = 'Erro desconhecido';
    let errorDetails = '';
    
    if (error instanceof Error) {
      errorMessage = error.message;
      
      // Melhorar mensagens espec√≠ficas para o usu√°rio
      if (errorMessage.includes('saldo insuficiente')) {
        errorDetails = 'Verifique o saldo dispon√≠vel na conta.';
      } else if (errorMessage.includes('n√£o autenticado') || errorMessage.includes('token')) {
        errorDetails = 'Fa√ßa login novamente.';
      } else if (errorMessage.includes('usu√°rio n√£o encontrado')) {
        errorDetails = 'Verifique se o ID do usu√°rio est√° correto.';
      } else if (errorMessage.includes('valor inv√°lido')) {
        errorDetails = 'Verifique se o valor da transa√ß√£o est√° correto.';
      } else if (errorMessage.includes('transa√ß√£o j√° processada')) {
        errorDetails = 'Esta compensa√ß√£o pode j√° ter sido realizada.';
      } else if (errorMessage.includes('limite')) {
        errorDetails = 'Valor pode ter excedido os limites permitidos.';
      } else if (errorMessage.includes('network') || errorMessage.includes('fetch')) {
        errorDetails = 'Verifique sua conex√£o com a internet.';
      } else if (errorMessage.includes('timeout')) {
        errorDetails = 'Tente novamente em alguns instantes.';
      }
    } else {
      errorMessage = String(error);
    }
    
    
    // Toast de erro mais informativo
    toast.error('Erro na Compensa√ß√£o Saldo Real', {
      description: `${errorMessage}${errorDetails ? ` ${errorDetails}` : ''}`,
      duration: 6000 // Mais tempo para ler erros importantes
    });
    
    return false;
  }
};

// ============================== HOOK PARA USO EM COMPONENTES ==============================

/**
 * üîß Hook para facilitar o uso da compensa√ß√£o BRBTC em componentes
 */
export const useCompensacaoBRBTC = () => {
  const [isLoading, setIsLoading] = React.useState(false);
  
  const executarCompensacao = async (
    extractRecord: MovimentoExtrato,
    observacoes?: string
  ): Promise<boolean> => {
    setIsLoading(true);
    
    try {
      const resultado = await realizarCompensacaoBRBTC(extractRecord, observacoes);
      return resultado;
    } finally {
      setIsLoading(false);
    }
  };
  
  return {
    executarCompensacao,
    isLoading
  };
};

// ============================== VALIDA√á√ïES ==============================

/**
 * ‚úÖ Validar se um registro do extrato √© eleg√≠vel para compensa√ß√£o BRBTC
 */
export const validarElegibilidadeBRBTC = (extractRecord: MovimentoExtrato): {
  elegivel: boolean;
  motivos: string[];
} => {
  const motivos: string[] = [];
  
  if (!extractRecord) {
    motivos.push('Registro do extrato n√£o fornecido');
    return { elegivel: false, motivos };
  }
  
  // Verificar se √© cr√©dito (dep√≥sito)
  if (extractRecord.type !== 'CR√âDITO') {
    motivos.push('Apenas registros de cr√©dito (dep√≥sitos) s√£o eleg√≠veis');
  }
  
  // Verificar se tem valor positivo
  if (extractRecord.value <= 0) {
    motivos.push('Valor deve ser positivo');
  }
  
  // Verificar se consegue extrair ID do usu√°rio
  const idUsuario = extrairIdUsuario(extractRecord);
  if (!idUsuario) {
    motivos.push('N√£o foi poss√≠vel identificar o ID do usu√°rio no registro');
  }
  
  // Verificar se tem dados m√≠nimos
  if (!extractRecord.id) {
    motivos.push('ID da transa√ß√£o n√£o encontrado');
  }
  
  return {
    elegivel: motivos.length === 0,
    motivos
  };
};
