// utils/pixApiClient.ts

import { TOKEN_STORAGE } from '@/config/api';
import { logger } from '@/utils/logger';

/**
 * üîê PixApiClient - Implementa√ß√£o da Nova Autentica√ß√£o H√≠brida
 * 
 * Conforme especifica√ß√µes do guia de seguran√ßa:
 * - API Key + Secret (como antes)
 * - JWT Token do usu√°rio logado (NOVO)
 * - Valida√ß√£o cruzada no backend
 * - Tratamento de novos c√≥digos de erro de seguran√ßa
 */
class PixApiClient {
  private apiKey: string;
  private apiSecret: string;
  private baseUrl: string;

  constructor() {
    // ‚úÖ Obter configura√ß√µes do ambiente
    this.apiKey = import.meta.env.VITE_PIX_API_KEY || '';
    this.apiSecret = import.meta.env.VITE_PIX_API_SECRET || '';
    this.baseUrl = import.meta.env.VITE_API_BASE_URL || '';

    // ‚ö†Ô∏è Validar configura√ß√µes cr√≠ticas
    if (!this.apiKey || !this.apiSecret || !this.baseUrl) {
      // Log seguro sem exposi√ß√£o de dados sens√≠veis
      if (process.env.NODE_ENV === 'development') {
        console.error('üö® [PIX-API-CLIENT] Configura√ß√µes de ambiente incompletas! Verifique vari√°veis de ambiente.');
      }
    }
  }

  /**
   * üîí Faz requisi√ß√£o PIX com autentica√ß√£o h√≠brida
   * @param endpoint - Endpoint da API (ex: '/pix/enviar')
   * @param method - M√©todo HTTP (POST, GET, etc.)
   * @param data - Dados para envio (para POST/PUT)
   * @returns Promise com resposta da API
   */
  async makePixRequest(endpoint: string, method: string = 'POST', data: any = null): Promise<any> {
    // üîí Obter token do usu√°rio logado
    const userToken = this.getUserToken();
    
    if (!userToken) {
      throw new Error('Usu√°rio n√£o autenticado. Fa√ßa login novamente.');
    }

    // ‚úÖ Preparar headers com autentica√ß√£o h√≠brida
    const config: RequestInit = {
      method,
      headers: {
              // Backend adiciona automaticamente: X-API-Key, X-API-Secret via JWT
        'Authorization': `Bearer ${userToken}`, // üî• CR√çTICO - JWT obrigat√≥rio
        'Content-Type': 'application/json'
      }
    };

    // ‚úÖ Adicionar body se necess√°rio
    if (data && (method === 'POST' || method === 'PUT')) {
      config.body = JSON.stringify(data);
    }

    try {


      const response = await fetch(`${this.baseUrl}${endpoint}`, config);
      
      // ‚úÖ Processar resposta
      if (!response.ok) {
        const error = await this.extractErrorFromResponse(response);
        throw new Error(error);
      }

      const result = await response.json();
      
      logger.info('[PIX-API-CLIENT] Requisi√ß√£o PIX bem-sucedida', {
        endpoint,
        status: response.status
      });

      return result;

    } catch (error) {
      logger.error('[PIX-API-CLIENT] Erro na requisi√ß√£o PIX:', error);
      
      // üîÑ Tratar erros espec√≠ficos de seguran√ßa
      const treatedError = this.handleSecurityErrors(error as Error);
      throw treatedError;
    }
  }

  /**
   * üîí Obter token do usu√°rio logado
   * @returns Token JWT ou null se n√£o autenticado
   */
  private getUserToken(): string | null {
    try {
      // Op√ß√£o 1: Via TOKEN_STORAGE (m√©todo preferido)
      const token = TOKEN_STORAGE.get();
      if (token) return token;

      // Op√ß√£o 2: Fallback para localStorage direto
      return localStorage.getItem('auth_token') || 
             localStorage.getItem('authToken') ||
             sessionStorage.getItem('userToken') ||
             null;

    } catch (error) {
      logger.error('[PIX-API-CLIENT] Erro ao obter token do usu√°rio:', error);
      return null;
    }
  }

  /**
   * üõ†Ô∏è Extrair mensagem de erro da resposta HTTP
   * @param response - Response da requisi√ß√£o HTTP
   * @returns Mensagem de erro tratada
   */
  private async extractErrorFromResponse(response: Response): Promise<string> {
    try {
      const errorData = await response.json();
      
      // üîç Tentar diferentes formatos de erro
      const errorMessage = 
        errorData.mensagem ||
        errorData.message ||
        errorData.error ||
        errorData.errorMessage ||
        errorData.response?.message ||
        errorData.response?.mensagem ||
        errorData.data?.message ||
        errorData.data?.mensagem ||
        `Erro HTTP ${response.status}: ${response.statusText}`;

      return errorMessage;

    } catch (parseError) {
      // Se n√£o conseguir fazer parse do JSON
      return `Erro HTTP ${response.status}: ${response.statusText}`;
    }
  }

  /**
   * üö® Tratar c√≥digos de erro espec√≠ficos de seguran√ßa
   * @param error - Erro original
   * @returns Erro tratado com mensagem amig√°vel
   */
  private handleSecurityErrors(error: Error): Error {
    const errorMessage = error.message.toLowerCase();

    // üìã C√≥digos de erro conforme guia de seguran√ßa
    const securityErrorCodes: Record<string, string> = {
      'sec_001': 'Credenciais da API est√£o em falta. Contate o suporte.',
      'sec_002': 'Chave da API √© inv√°lida. Verifique suas configura√ß√µes.',
      'sec_005': 'Token de autentica√ß√£o √© obrigat√≥rio. Fa√ßa login novamente.',
      'sec_006': 'Formato do token de autentica√ß√£o √© inv√°lido. Fa√ßa login novamente.',
      'sec_007': 'Token n√£o corresponde √† conta selecionada. Tente fazer logout e login novamente.',
      'sec_009': 'Sua sess√£o expirou. Fa√ßa login novamente.'
    };

    // üîç Verificar se √© um erro de seguran√ßa conhecido
    for (const [code, message] of Object.entries(securityErrorCodes)) {
      if (errorMessage.includes(code.toLowerCase())) {
        logger.warn(`[PIX-API-CLIENT] Erro de seguran√ßa detectado: ${code}`);
        return new Error(message);
      }
    }

    // üîÑ Tratar outros erros comuns
    if (errorMessage.includes('unauthorized') || errorMessage.includes('401')) {
      return new Error('Sua sess√£o expirou. Fa√ßa login novamente.');
    }

    if (errorMessage.includes('forbidden') || errorMessage.includes('403')) {
      return new Error('Voc√™ n√£o tem permiss√£o para esta opera√ß√£o.');
    }

    if (errorMessage.includes('network') || errorMessage.includes('fetch')) {
      return new Error('Erro de conex√£o. Verifique sua internet e tente novamente.');
    }

    if (errorMessage.includes('timeout')) {
      return new Error('A requisi√ß√£o demorou muito para responder. Tente novamente.');
    }

    // üîÑ Retorna erro original se n√£o for espec√≠fico
    return error;
  }

  /**
   * ‚úÖ Verificar se o usu√°rio est√° autenticado
   * @returns true se autenticado, false caso contr√°rio
   */
  public isUserAuthenticated(): boolean {
    const token = this.getUserToken();
    return !!token;
  }

  /**
   * ‚öôÔ∏è Configurar credenciais dinamicamente (para testes ou ambiente espec√≠fico)
   * @param apiKey - Nova API Key
   * @param apiSecret - Novo API Secret
   * @param baseUrl - Nova URL base (opcional)
   */
  public setCredentials(apiKey: string, apiSecret: string, baseUrl?: string): void {
    this.apiKey = apiKey;
    this.apiSecret = apiSecret;
    if (baseUrl) {
      this.baseUrl = baseUrl;
    }

    logger.info('[PIX-API-CLIENT] Credenciais atualizadas', {
      hasApiKey: !!apiKey,
      hasApiSecret: !!apiSecret,
      hasBaseUrl: !!baseUrl
    });
  }

  /**
   * üìä Obter estat√≠sticas da configura√ß√£o
   * @returns Objeto com informa√ß√µes de configura√ß√£o (sem dados sens√≠veis)
   */
  public getConfigInfo(): {
    hasApiKey: boolean;
    hasApiSecret: boolean;
    hasBaseUrl: boolean;
    isUserAuthenticated: boolean;
  } {
    return {
      hasApiKey: !!this.apiKey,
      hasApiSecret: !!this.apiSecret,
      hasBaseUrl: !!this.baseUrl,
      isUserAuthenticated: this.isUserAuthenticated()
    };
  }
}

// ‚úÖ Inst√¢ncia √∫nica para uso global
export const pixApiClient = new PixApiClient();
export default pixApiClient;

// üìù Exemplos de uso (comentados para documenta√ß√£o):
/*
// ‚úÖ Enviar PIX
try {
  const resultado = await pixApiClient.makePixRequest('/pix/enviar', 'POST', {
    chave: 'usuario@email.com',
    valor: 100.00,
    descricao: 'Pagamento teste'
  });
  
  console.log('PIX enviado:', resultado);
} catch (error) {
  console.error('Erro ao enviar PIX:', error.message);
}

// ‚úÖ Listar chaves PIX
try {
  const chaves = await pixApiClient.makePixRequest('/pix/chaves/listar', 'GET');
  console.log('Chaves PIX:', chaves);
} catch (error) {
  console.error('Erro ao listar chaves:', error.message);
}

// ‚úÖ Criar QR Code
try {
  const qrCode = await pixApiClient.makePixRequest('/pix/qrcode/estatico', 'POST', {
    valor: 50.00,
    informacoesAdicionais: 'Pagamento de produto'
  });
  
  console.log('QR Code criado:', qrCode);
} catch (error) {
  console.error('Erro ao criar QR Code:', error.message);
}
*/
